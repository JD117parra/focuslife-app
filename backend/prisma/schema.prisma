generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks        Task[]
  habits       Habit[]
  habitEntries HabitEntry[]
  transactions Transaction[]

  @@map("users")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      String   @default("PENDING")
  priority    String   @default("MEDIUM")
  categoryId  String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("tasks")
}

model Habit {
  id          String   @id @default(cuid())
  name        String
  description String?
  frequency   String   @default("DAILY")
  target      Int      @default(1)
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries HabitEntry[]

  @@map("habits")
}

model HabitEntry {
  id        String   @id @default(cuid())
  habitId   String
  userId    String
  date      DateTime
  count     Int      @default(1)
  notes     String?
  createdAt DateTime @default(now())

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([habitId, userId, date])
  @@map("habit_entries")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  type        String   // "INCOME" | "EXPENSE"
  categoryId  String?
  userId      String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Category {
  id    String @id @default(cuid())
  name  String
  type  String // "TASK" | "FINANCE"
  color String @default("#6366f1")
  icon  String?

  tasks        Task[]
  transactions Transaction[]

  @@unique([name, type])
  @@map("categories")
}